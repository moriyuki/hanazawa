詳細仕様書　hanazawaプロジェクト

## クラス構成
- IView interface
- IModel interface

- main viewクラス
ClassName:MainPage
起動時に表示され、チケット一覧を表示する

コンストラクタでShowList()を実行

ShowList()
モデルクラスから必要な情報を読み込み、表示する

イベント
チケット完了時（checkbox　chekedイベント）
新規チケット追加時（textboxのforcus変更イベント）
完了済みチケットの右クリック時（mouse clickイベント）
終了時イベント（window closeイベント）レイズ
チケット（文字列）クリックイベント　detailviewを表示

- detail view クラスClass
Name:DetailViewClass
チケットの詳細を表示する
バリデーションチェックを行う
変更箇所をモデルに書き込む

- setting view クラス(２次イテレーション)
Name:SettingViewClass
アプリの設定情報を表示する
バリデーションチェックを行う

- setting data controlクラス(２次イテレーション)
Name:SettingModelClass
設定情報の読み書きを行う
singltonでの開発を検討

- redmine session クラス(２次イテレーション)
Name:SessionControllerClass
サーバとの接続を管理する

-- 既に割り当てられているプロジェクトを一つ選び、そのチケット一覧を読み込む
-- [todo]プロジェクトに割り当てられていない場合の表示をどうするか
割り当てられているプロジェクト一覧を読み込む
ー＞すべてのプロジェクトを読み込む
ー＞プロジェクトIDを指定しメンバーを読み込む
ー＞プロジェクトIDを指定しチケットを読み込む

チケットの詳細を表示する
ー＞チケットIDを指定しチケットの内容を読み込む

チケットを発行する
ー＞

チケットを修正する
ー＞

- mainクラス
Name:App
起動時にインスタンスが作られるクラス。すべてのクラスを管理する。

コンストラクタにて
1.設定情報を読み込む
setting data controlクラスのインスタンスを生成
readSetting()
 設定情報を読み込む

2.データを取得する
ローカルデータ管理クラスのインスタンスを生成
モデルクラスに読み込ませ、データを取得する

3.画面表示
main view classのインスタンスを作成、呼び出す。

イベント
main view class　closedイベントの処理
1.設定情報の保存
2.ローカルデータを書き込む
3.main view classに処理を返す
4.自身の終了処理を行う

- モデルクラス
Name:ModelClass
チケット一覧、チケット詳細など、表示するすべてのデータを保持する
データベースとのアクセスを行う
xmlでexportする
Singletonで実装

- ローカルデータ管理クラス（モデルクラスを継承）
ファイルでデータ管理を行う。形式はXMLで保持する。
タイマーイベントで定期的にデータをローカルに書き込む。

- redmine rest client クラス(２次イテレーション)（モデルクラスを継承）
データの読み書きを行う(XML)